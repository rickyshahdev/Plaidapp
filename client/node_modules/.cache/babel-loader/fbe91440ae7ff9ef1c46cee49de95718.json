{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nvar PlaidLinkButton =\n/** @class */\nfunction (_super) {\n  __extends(PlaidLinkButton, _super);\n\n  function PlaidLinkButton(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.handleButtonClick = function () {\n      _this.plaidLinkHandler.open();\n    };\n\n    _this.handleScriptLoad = function () {\n      _this.setState({\n        scriptLoaded: true\n      });\n\n      _this.plaidLinkHandler = window.Plaid.create(__assign({}, _this.props.plaidLinkProps));\n      if (_this.props.onScriptLoad) _this.props.onScriptLoad();\n    };\n\n    _this.handleScriptError = function () {\n      _this.setState({\n        scriptErrored: true\n      });\n\n      if (_this.props.onScriptError) _this.props.onScriptError();\n    };\n\n    _this.getScriptEl = function () {\n      return document.querySelector(\"script[src=\\\"\" + _this.props.scriptUrl + \"\\\"]\");\n    };\n\n    _this.state = {\n      scriptErrored: false,\n      scriptLoaded: false\n    };\n    return _this;\n  }\n\n  PlaidLinkButton.prototype.componentDidMount = function () {\n    var scriptEl = this.getScriptEl();\n    var scriptAlreadyInserted = scriptEl != null;\n    var scriptAlreadyLoaded = scriptAlreadyInserted && window.Plaid;\n\n    if (scriptAlreadyLoaded) {\n      this.handleScriptLoad();\n      return;\n    }\n\n    if (scriptAlreadyInserted) {\n      scriptEl.addEventListener('load', this.handleScriptLoad);\n      return;\n    }\n\n    scriptEl = document.createElement('script');\n    scriptEl.type = 'text/javascript';\n    scriptEl.src = this.props.scriptUrl;\n    scriptEl.addEventListener('load', this.handleScriptLoad);\n    scriptEl.addEventListener('error', this.handleScriptError);\n    document.head.appendChild(scriptEl);\n  };\n\n  PlaidLinkButton.prototype.componentWillUnmount = function () {\n    var scriptEl = this.getScriptEl();\n\n    if (scriptEl) {\n      scriptEl.removeEventListener('load', this.handleScriptLoad);\n      scriptEl.removeEventListener('error', this.handleScriptError);\n    }\n  };\n\n  PlaidLinkButton.prototype.render = function () {\n    return React.createElement(\"button\", __assign({}, this.props.buttonProps, {\n      disabled: this.state.scriptErrored || !this.state.scriptLoaded,\n      onClick: this.handleButtonClick\n    }), this.props.children);\n  };\n\n  PlaidLinkButton.propTypes = {\n    // Any props set here will be spread onto the top-level button element\n    buttonProps: PropTypes.object,\n    // Used to set the button text\n    children: PropTypes.node,\n    scriptUrl: PropTypes.string,\n    onScriptLoad: PropTypes.func,\n    onScriptError: PropTypes.func,\n    // See: https://plaid.com/docs/api/#integrating-with-link\n    plaidLinkProps: PropTypes.shape({\n      // Displayed once a user has successfully linked their account\n      clientName: PropTypes.string.isRequired,\n      // A list of Plaid product(s) you wish to use. Valid products are : transactions, auth, and identity.\n      // Only institutions that support all requested products will be shown.\n      product: PropTypes.arrayOf(PropTypes.oneOf(['auth', 'transactions', 'identity', 'balance', 'income', 'assets'])).isRequired,\n      // The public_key associated with your account; available from the Dashboard.\n      key: PropTypes.string.isRequired,\n      // The Plaid API environment on which to create user accounts.\n      // For development and testing, use sandbox or development. For production use, use production.\n      // Note: all production requests are billed.\n      env: PropTypes.oneOf(['sandbox', 'development', 'production']).isRequired,\n      // A function that is called when a user has successfully onboarded an Item.\n      // The function should expect two arguments, the public_token and a metadata object.\n      onSuccess: PropTypes.func.isRequired,\n      // A function that is called when a user has specifically exited the Link flow.\n      // The function should expect two arguments, a nullable error object and a metadata object.\n      onExit: PropTypes.func,\n      // A function that is called when a user reaches certain points in the Link flow.\n      // The function should expect two arguments, an eventName string and a metadata object. See onEvent.\n      onEvent: PropTypes.func,\n      // A function that is called when the Link module has finished loading.\n      // Calls to plaidLinkHandler.open() prior to the onLoad callback will be delayed until the module is fully loaded.\n      onLoad: PropTypes.func,\n      // Specify a webhook to associate with an Item.\n      // Plaid fires a webhook when the Item requires updated credentials or when new data is available.\n      webhook: PropTypes.string,\n      // Specify a public_token to launch Link in update mode for a particular Item.\n      // This will cause Link to open directly to the authentication step for that Item's institution.\n      // Use the POST /item/public_token/create endpoint to generate a public_token for an Item.\n      token: PropTypes.string,\n      // Set to true if launching Link within a WebView.\n      isWebView: PropTypes.bool\n    }).isRequired\n  };\n  PlaidLinkButton.defaultProps = {\n    scriptUrl: 'https://cdn.plaid.com/link/v2/stable/link-initialize.js',\n    children: 'Link new account'\n  };\n  return PlaidLinkButton;\n}(React.PureComponent);\n\nexport default PlaidLinkButton;","map":null,"metadata":{},"sourceType":"module"}