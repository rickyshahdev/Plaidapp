{"ast":null,"code":"'use strict';\n\nvar R = require('ramda'); // (Promise, Callback, Options?) => Promise | void\n//\n// Options: { no_spread: bool }\n//   no_spread: prevents wrapPromise from applying array-like return arguments\n//              to the callback.\n\n\nvar wrapPromise = function wrapPromise(promise, cb, options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (cb) {\n    return promise.then(function (args) {\n      if (R.isArrayLike(args) && !options.no_spread) {\n        // call outside of promise stack\n        setImmediate(function () {\n          R.apply(R.partial(cb, [null]), args);\n        });\n      } else {\n        setImmediate(function () {\n          cb(null, args);\n        });\n      }\n    }).catch(function (err) {\n      setImmediate(function () {\n        cb(err);\n      });\n    });\n  }\n\n  return promise;\n};\n\nmodule.exports = wrapPromise;","map":null,"metadata":{},"sourceType":"script"}