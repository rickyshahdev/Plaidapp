{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/ricky/Desktop/PROJECTS/mern-plaid/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar P = require('bluebird');\n\nvar R = require('ramda');\n\nvar plaidEnvironments = require('./plaidEnvironments');\n\nvar plaidRequest = require('./plaidRequest');\n\nvar wrapPromise = require('./wrapPromise'); // Default version of Plaid API, if not specified by the client.\n\n\nvar DEFAULT_VERSION = '2020-09-14'; // Client(String, String, String, String, Object?)\n\nfunction Client(configs) {\n  if (!R.is(Object, configs)) {\n    throw new Error('Unexpected parameter type. ' + 'Refer to https://github.com/plaid/plaid-node ' + 'for how to create a Plaid client.');\n  }\n\n  if (R.isNil(configs.clientID)) {\n    throw new Error('Missing Plaid \"clientID\"');\n  }\n\n  if (R.isNil(configs.secret)) {\n    throw new Error('Missing Plaid \"secret\"');\n  }\n\n  if (!R.any(R.equals(configs.env), R.values(plaidEnvironments))) {\n    throw new Error('Invalid Plaid environment');\n  }\n\n  if (arguments.length > 1) {\n    throw new Error('Too many arguments to constructor');\n  }\n\n  this.client_id = configs.clientID;\n  this.secret = configs.secret;\n  this.env = configs.env;\n\n  if (configs.options == null) {\n    configs.options = {};\n  }\n\n  if (configs.options.version == null) {\n    configs.options.version = DEFAULT_VERSION;\n  }\n\n  this.client_request_opts = configs.options;\n} // Private\n\n\nvar requestWithAccessToken = function requestWithAccessToken(path) {\n  return function (access_token, options, cb) {\n    return this._authenticatedRequest({\n      path: path,\n      body: {\n        access_token: access_token\n      }\n    }, options, cb);\n  };\n};\n\nvar requestWithIncomeVerificationId = function requestWithIncomeVerificationId(path) {\n  return function (incomeVerificationId, options, cb) {\n    return this._authenticatedRequest({\n      path: path,\n      body: {\n        income_verification_id: incomeVerificationId\n      }\n    }, cb);\n  };\n};\n\nClient.prototype._authenticatedRequest = function _authenticatedRequest(requestSpec, options, cb) {\n  // juggle arguments\n  if (typeof options === 'function') {\n    cb = options;\n    options = {};\n  } else {\n    requestSpec.body.options = options;\n  }\n\n  var context = R.merge({\n    env: this.env\n  }, {\n    client_id: this.client_id,\n    secret: this.secret\n  });\n  return plaidRequest(context, requestSpec, this.client_request_opts, cb);\n}; // createPublicToken(String, Object, Function)\n\n\nClient.prototype.createPublicToken = function (access_token, options, cb) {\n  var createPublicTokenRequest = requestWithAccessToken('/item/public_token/create', false);\n  console.warn(\"Warning: this method will be deprecated in a future version.\\n  To replace the public_token for initializing Link,\\n  look into the link_token at\\n  https://plaid.com/docs/api/tokens/#linktokencreate\");\n  return createPublicTokenRequest.call(this, access_token, options, cb);\n};\n\nvar linkTokenConfigFields = ['user', 'client_name', 'products', 'country_codes', 'language', 'webhook', 'access_token', 'link_customization_name', 'redirect_uri', 'android_package_name', 'account_filters', 'cross_app_item_add', 'payment_initiation']; // createLinkToken(CreateLinkTokenOptions, Function)\n\nClient.prototype.createLinkToken = function (options, cb) {\n  var body = linkTokenConfigFields.reduce(function (body, field) {\n    body[field] = options[field];\n    return body;\n  }, {});\n  return this._authenticatedRequest({\n    path: '/link/token/create',\n    body: body\n  }, cb);\n}; // getLinkToken(CreateLinkTokenOptions, Function)\n\n\nClient.prototype.getLinkToken = function (link_token, cb) {\n  return this._authenticatedRequest({\n    path: '/link/token/get',\n    body: {\n      link_token: link_token\n    }\n  }, cb);\n}; // exchangePublicToken(String, Function)\n\n\nClient.prototype.exchangePublicToken = function (public_token, cb) {\n  return this._authenticatedRequest({\n    path: '/item/public_token/exchange',\n    body: {\n      public_token: public_token\n    }\n  }, cb);\n}; // updateItemWebhook(String, String, Function)\n\n\nClient.prototype.updateItemWebhook = function (access_token, webhook, cb) {\n  return this._authenticatedRequest({\n    path: '/item/webhook/update',\n    body: {\n      access_token: access_token,\n      webhook: webhook\n    }\n  }, cb);\n}; // createProcessorToken(String, String, String, Function)\n\n\nClient.prototype.createProcessorToken = function (access_token, account_id, processor, cb) {\n  var endpoint = '/processor/token/create';\n  var options = {\n    access_token: access_token,\n    account_id: account_id,\n    processor: processor\n  };\n\n  if (processor === 'stripe') {\n    endpoint = '/processor/stripe/bank_account_token/create';\n    delete options.processor;\n  } else if (processor === 'apex') {\n    endpoint = '/processor/apex/processor_token/create';\n    delete options.processor;\n  }\n\n  return this._authenticatedRequest({\n    path: endpoint,\n    body: options\n  }, cb);\n};\n\nClient.prototype.createStripeToken = function (access_token, account_id, cb) {\n  return this.createProcessorToken(access_token, account_id, 'stripe', cb);\n}; // invalidateAccessToken(String, Function)\n\n\nClient.prototype.invalidateAccessToken = requestWithAccessToken('/item/access_token/invalidate'); // removeItem(String, Function)\n\nClient.prototype.removeItem = requestWithAccessToken('/item/remove'); // getItem(String, Function)\n\nClient.prototype.getItem = requestWithAccessToken('/item/get'); // importItem([String], Object, Object?, Function)\n\nClient.prototype.importItem = function (products, user_auth, options, cb) {\n  return this._authenticatedRequest({\n    path: '/item/import',\n    body: {\n      products: products,\n      user_auth: user_auth\n    }\n  }, options, cb);\n}; // getAccounts(String, Object?, Function)\n\n\nClient.prototype.getAccounts = requestWithAccessToken('/accounts/get'); // getBalance(String, Object?, Function)\n\nClient.prototype.getBalance = requestWithAccessToken('/accounts/balance/get'); // getAuth(String, Object?, Function)\n\nClient.prototype.getAuth = requestWithAccessToken('/auth/get'); // getIncome(String, Function)\n// getIdentity(String, Function)\n\nClient.prototype.getIdentity = requestWithAccessToken('/identity/get'); // getIncome(String, Function)\n\nClient.prototype.getIncome = requestWithAccessToken('/income/get'); // getTransactions(String, Date, Date, Object?, Function)\n\nClient.prototype.getTransactions = function (access_token, start_date, end_date, options, cb) {\n  return this._authenticatedRequest({\n    path: '/transactions/get',\n    body: {\n      access_token: access_token,\n      start_date: start_date,\n      end_date: end_date\n    }\n  }, options, cb);\n}; // getAllTransactions(String, Date, Date, Object?, Function)\n\n\nClient.prototype.getAllTransactions = function (access_token, start_date, end_date, options, cb) {\n  // juggle arguments\n  if (typeof options === 'function') {\n    cb = options;\n    options = {};\n  } else {\n    options = R.defaultTo({}, options);\n  }\n\n  var self = this;\n  return wrapPromise(P.coroutine( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var transactions, transactionsCount, response, transactionsResponse;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            transactions = [];\n            transactionsCount = 0;\n            response = {};\n\n          case 3:\n            if (!true) {\n              _context.next = 14;\n              break;\n            }\n\n            _context.next = 6;\n            return self.getTransactions(access_token, start_date, end_date, R.merge(options, {\n              count: 500,\n              // largest allowed value\n              offset: transactions.length\n            }));\n\n          case 6:\n            transactionsResponse = _context.sent;\n            response.accounts = transactionsResponse.accounts;\n            response.item = transactionsResponse.item;\n\n            if (transactionsResponse.transactions != null) {\n              transactions = R.concat(transactions, transactionsResponse.transactions);\n              transactionsCount += transactionsResponse.transactions.length;\n            }\n\n            if (!(transactionsCount >= transactionsResponse.total_transactions)) {\n              _context.next = 12;\n              break;\n            }\n\n            return _context.abrupt(\"break\", 14);\n\n          case 12:\n            _context.next = 3;\n            break;\n\n          case 14:\n            response.total_transactions = transactionsCount;\n            response.transactions = transactions;\n            return _context.abrupt(\"return\", response);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }))(), cb, {\n    no_spread: true\n  });\n}; // transactionsRefresh(String, Function)\n\n\nClient.prototype.refreshTransactions = requestWithAccessToken('/transactions/refresh'); // getCreditDetails(String, Function)\n\nClient.prototype.getCreditDetails = requestWithAccessToken('/credit_details/get'); // getHoldings(String, Function)\n\nClient.prototype.getHoldings = requestWithAccessToken('/investments/holdings/get'); // getPaystub(String, Function)\n\nClient.prototype.getPaystub = requestWithIncomeVerificationId('/income/verification/paystub/get'); // getSummary(String, Function)\n\nClient.prototype.getSummary = requestWithIncomeVerificationId('/income/verification/summary/get'); // getInvestmentTransactions(String, Date, Date, Object?, Function)\n\nClient.prototype.getInvestmentTransactions = function (access_token, start_date, end_date, options, cb) {\n  return this._authenticatedRequest({\n    path: '/investments/transactions/get',\n    body: {\n      access_token: access_token,\n      start_date: start_date,\n      end_date: end_date\n    }\n  }, options, cb);\n}; // getLiabilities(String, Function)\n\n\nClient.prototype.getLiabilities = requestWithAccessToken('/liabilities/get'); // createAssetReport([String], Number, Object, Function)\n\nClient.prototype.createAssetReport = function (access_tokens, days_requested, options, cb) {\n  return this._authenticatedRequest({\n    path: '/asset_report/create',\n    body: {\n      access_tokens: access_tokens,\n      days_requested: days_requested\n    }\n  }, options, cb);\n}; // filterAssetReport(String, [String], Function)\n\n\nClient.prototype.filterAssetReport = function (asset_report_token, account_ids_to_exclude, cb) {\n  return this._authenticatedRequest({\n    path: '/asset_report/filter',\n    body: {\n      asset_report_token: asset_report_token,\n      account_ids_to_exclude: account_ids_to_exclude\n    }\n  }, cb);\n}; // refreshAssetReport(String, Number, Object?, Function)\n\n\nClient.prototype.refreshAssetReport = function (asset_report_token, days_requested, options, cb) {\n  return this._authenticatedRequest({\n    path: '/asset_report/refresh',\n    body: {\n      asset_report_token: asset_report_token,\n      days_requested: days_requested\n    }\n  }, options, cb);\n}; // getAssetReport(String, Boolean, Function)\n\n\nClient.prototype.getAssetReport = function (asset_report_token, include_insights, cb) {\n  return this._authenticatedRequest({\n    path: '/asset_report/get',\n    body: {\n      asset_report_token: asset_report_token,\n      include_insights: include_insights\n    }\n  }, cb);\n}; // getAssetReportPdf(String, Function)\n\n\nClient.prototype.getAssetReportPdf = function (asset_report_token, cb) {\n  return this._authenticatedRequest({\n    path: '/asset_report/pdf/get',\n    body: {\n      asset_report_token: asset_report_token\n    },\n    binary: true\n  }, cb);\n}; // createAuditCopy(String, String, Function)\n\n\nClient.prototype.createAuditCopy = function (asset_report_token, auditor_id, cb) {\n  return this._authenticatedRequest({\n    path: '/asset_report/audit_copy/create',\n    body: {\n      asset_report_token: asset_report_token,\n      auditor_id: auditor_id\n    }\n  }, cb);\n}; // getAuditCopy(String, Function)\n\n\nClient.prototype.getAuditCopy = function (audit_copy_token, cb) {\n  return this._authenticatedRequest({\n    path: '/asset_report/audit_copy/get',\n    body: {\n      audit_copy_token: audit_copy_token\n    }\n  }, cb);\n}; // removeAuditCopy(String, Function)\n\n\nClient.prototype.removeAuditCopy = function (audit_copy_token, cb) {\n  return this._authenticatedRequest({\n    path: '/asset_report/audit_copy/remove',\n    body: {\n      audit_copy_token: audit_copy_token\n    }\n  }, cb);\n}; // removeAssetReport(String, Function)\n\n\nClient.prototype.removeAssetReport = function (asset_report_token, cb) {\n  return this._authenticatedRequest({\n    path: '/asset_report/remove',\n    body: {\n      asset_report_token: asset_report_token\n    }\n  }, cb);\n}; // createPaymentRecipient(String, String, Object, Object, Function)\n\n\nClient.prototype.createPaymentRecipient = function (name, iban, address, bacs, cb) {\n  return this._authenticatedRequest({\n    path: '/payment_initiation/recipient/create',\n    body: {\n      name: name,\n      iban: iban != null ? iban : undefined,\n      address: address,\n      bacs: bacs != null ? bacs : undefined\n    }\n  }, cb);\n}; // getPaymentRecipient(String, Function)\n\n\nClient.prototype.getPaymentRecipient = function (recipient_id, cb) {\n  return this._authenticatedRequest({\n    path: '/payment_initiation/recipient/get',\n    body: {\n      recipient_id: recipient_id\n    }\n  }, cb);\n}; // listPaymentRecipients(Function)\n\n\nClient.prototype.listPaymentRecipients = function (cb) {\n  return this._authenticatedRequest({\n    path: '/payment_initiation/recipient/list'\n  }, cb);\n}; // createPayment(String, String, Object, Function)\n\n\nClient.prototype.createPayment = function (recipient_id, reference, amount, cb) {\n  return this._authenticatedRequest({\n    path: '/payment_initiation/payment/create',\n    body: {\n      recipient_id: recipient_id,\n      reference: reference,\n      amount: amount\n    }\n  }, cb);\n}; // createPaymentToken(String, Function)\n\n\nClient.prototype.createPaymentToken = function (payment_id, cb) {\n  console.warn(\"Warning: this method will be deprecated in a future version.\\n    To replace the payment_token,\\n    look into the link_token at\\n    https://plaid.com/docs/api/tokens/#linktokencreate.\");\n  return this._authenticatedRequest({\n    path: '/payment_initiation/payment/token/create',\n    body: {\n      payment_id: payment_id\n    }\n  }, cb);\n}; // getPayment(String, Function)\n\n\nClient.prototype.getPayment = function (payment_id, cb) {\n  return this._authenticatedRequest({\n    path: '/payment_initiation/payment/get',\n    body: {\n      payment_id: payment_id\n    }\n  }, cb);\n}; // listPayments(Object, Function)\n\n\nClient.prototype.listPayments = function (options, cb) {\n  return this._authenticatedRequest({\n    path: '/payment_initiation/payment/list',\n    body: options\n  }, cb);\n}; // getDepositSwitch(String, Object?, Function)\n\n\nClient.prototype.getDepositSwitch = function (deposit_switch_id, options, cb) {\n  return this._authenticatedRequest({\n    path: '/deposit_switch/get',\n    body: {\n      deposit_switch_id: deposit_switch_id\n    }\n  }, options, cb);\n}; // createDepositSwitch(String, String, Object?, Function)\n\n\nClient.prototype.createDepositSwitch = function (target_account_id, target_access_token, options, cb) {\n  return this._authenticatedRequest({\n    path: '/deposit_switch/create',\n    body: {\n      target_account_id: target_account_id,\n      target_access_token: target_access_token\n    }\n  }, options, cb);\n}; // createDepositSwitchToken(String, Object?, Function)\n\n\nClient.prototype.createDepositSwitchToken = function (deposit_switch_id, options, cb) {\n  return this._authenticatedRequest({\n    path: '/deposit_switch/token/create',\n    body: {\n      deposit_switch_id: deposit_switch_id\n    }\n  }, options, cb);\n}; // getInstitutions(Number, Number, [String], Object?, Function);\n\n\nClient.prototype.getInstitutions = function (count, offset, country_codes, options, cb) {\n  return this._authenticatedRequest({\n    path: '/institutions/get',\n    body: {\n      count: count,\n      offset: offset,\n      country_codes: country_codes\n    }\n  }, options, cb);\n}; // getInstitutionById(String, [String], Object?, Function);\n\n\nClient.prototype.getInstitutionById = function (institution_id, country_codes, options, cb) {\n  return this._authenticatedRequest({\n    path: '/institutions/get_by_id',\n    body: {\n      institution_id: institution_id,\n      country_codes: country_codes\n    }\n  }, options, cb);\n}; // searchInstitutionsByName(String, [String], Object?, Function)\n\n\nClient.prototype.searchInstitutionsByName = function (query, products, country_codes, options, cb) {\n  return this._authenticatedRequest({\n    path: '/institutions/search',\n    body: {\n      query: query,\n      products: products,\n      country_codes: country_codes\n    }\n  }, options, cb);\n}; // getCategories(Function)\n\n\nClient.prototype.getCategories = function (cb) {\n  return plaidRequest({\n    env: this.env\n  }, {\n    path: '/categories/get'\n  }, this.client_request_opts, cb);\n}; // resetLogin(String, Function) - sandbox only\n\n\nClient.prototype.resetLogin = requestWithAccessToken('/sandbox/item/reset_login'); // getWebhookVerificationKey(String, Function)\n\nClient.prototype.getWebhookVerificationKey = function (key_id, cb) {\n  return this._authenticatedRequest({\n    path: '/webhook_verification_key/get',\n    body: {\n      key_id: key_id\n    }\n  }, cb);\n}; // sandboxPublicTokenCreate(String, Array, Object?, Function) - sandbox only\n\n\nClient.prototype.sandboxPublicTokenCreate = function (institution_id, initial_products, options, cb) {\n  return this._authenticatedRequest({\n    path: '/sandbox/public_token/create',\n    body: {\n      institution_id: institution_id,\n      initial_products: initial_products\n    }\n  }, options, cb);\n}; // sandboxItemFireWebhook(String, String, Function) - sandbox only\n\n\nClient.prototype.sandboxItemFireWebhook = function (access_token, webhook_code, cb) {\n  return this._authenticatedRequest({\n    path: '/sandbox/item/fire_webhook',\n    body: {\n      access_token: access_token,\n      webhook_code: webhook_code\n    }\n  }, cb);\n}; // sandboxItemSetVerificationStatus(String, String, String, Function)\n// - sandbox only\n\n\nClient.prototype.sandboxItemSetVerificationStatus = function (access_token, account_id, verification_status, cb) {\n  return this._authenticatedRequest({\n    path: '/sandbox/item/set_verification_status',\n    body: {\n      access_token: access_token,\n      account_id: account_id,\n      verification_status: verification_status\n    }\n  }, cb);\n};\n\nmodule.exports = Client;","map":null,"metadata":{},"sourceType":"script"}